#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# https://medium.com/@alejandro.millan.frias/managing-kubernetes-from-aws-lambda-7922c3546249
# forked from https://github.com/alemf90/eks-lambda-python/blob/master/auth.py

import base64
import os
import re
import yaml
import boto3
from botocore.signers import RequestSigner
from kubernetes import client, config
from kubernetes.client import *
import tempfile


__all__ = ["EKS"]

def handle_not_found(api, **args):
    try:
        return api(**args)
    except ApiException as e:
        if e.reason == "Not Found":
            return None
        raise e

class KubeClient(object):

    METHOD = "GET"
    EXPIRES = 60
    EKS_HEADER = "x-k8s-aws-id"
    EKS_PREFIX = "k8s-aws-v1."
    STS_URL = "sts.amazonaws.com"
    STS_ACTION = "Action=GetCallerIdentity&Version=2011-06-15"

    def __init__(self, cluster_name: str, endpoint: str, certificate: str)
        self.cluster_name = cluster_name
        self.endpoint = endpoint
        self.certificate = certificate
        self.kube_config = None
        self.api = None

    def __enter__(self):
        self.api = self.__create_api()
        return self

    def __exit__(self, exc_type, exc_file, exc_tb ):
        if self.kube_config is not None:
            if os.path.isfile(self.kube_config):
                os.remove(self.kube_config)
            self.kube_config = None
        self.api = None


    def __create_api(self):
        self.__create_kube_config()
        config.load_kube_config(self.kube_config)
        client_configuration = client.Configuration()
        client_configuration.api_key["authorization"] = self.get_token()
        client_configuration.api_key_prefix["authorization"] = "Bearer"

        return client.ApiClient(configuration=client_configuration)

    def __create_kube_config(self):
        if self.kube_config is None:
            kube_content = {
                "apiVersion": "v1",
                "clusters": [
                    {
                        "cluster": 
                            {
                                "server": self.endpoint,
                                "certificate-authority-data": self.certificate,
                            },
                        "name": "k8s",
                    }
                ],
                "contexts": [
                    {
                        "context": {
                            "cluster": "k8s",
                            "user": "aws"
                        },
                        "name": "aws",
                    }
                ],
                "current-context": "aws",
                "Kind": "config",
                "users": [
                    {
                        "name": "aws",
                        "user": {"username": "lambda"},
                    }]
            }

            kube_config_file = tempfile.NamedTemporaryFile(suffix='kubeconfig', delete=False)
            data = yaml.safe_dump(kube_content, default_flow_style=False)
            kube_config_file.write(data.encode('UTF-8'))
            kube_config_file.close()
            self.kube_config = kube_config_file.name

    def get_token(self) -> str:
        """
        Return bearer token
        """
        session = boto3.session.Session()
        # Get ServiceID required by class RequestSigner
        client = session.client(service_name='sts')
        service_id = client.meta.service_model.service_id

        signer = RequestSigner(
            service_id,
            self.session.region_name,
            "sts",
            "v4",
            self.session.get_credentials(),
            self.session.events
        )

        params = {
            "method": self.METHOD,
            'url': 'https://sts.{}.amazonaws.com/Action=GetCallerIdentity&Version=2011-06-15?'.format(     
                self.session.region_name),
            "body": {},
            "headers": {self.EKS_HEADER: self.cluster_name},
            "context": {},
        }

        signed_url = signer.generate_presigned_url(
            params,
            region_name=session.region_name,
            expires_in=self.EXPIRES,
            operation_name=""
        )
        base64_url = base64.urlsafe_b64decode(signed_url.encode('utf-8')).decode("utf-8")


        # need to remove base64 encoding padding:
        # https://github.com/kubernetes-sigs/aws-iam-authenticator/issues/202
        return 'k8s-aws-v1.' + re.sub(r'=*', '', base64_url)



    def create_config_map(self, name: str, namespace: str, config_map: V1ConfigMap) -> str:
        v1_api = CoreV1Api(api_client=self.api)
        existing = handle_not_found(v1_api.read_namespaced_config_map, name=name, namespace=namespace)
        if existing is None:
            v1_api.create_namespaced_config_map(namespace=namespace, body=config_map)
            return "ConfigMap %s/%s created" %(namespace, name)

        return "ConfigMap %s/%s exist. Ignoring" % (namespace, name)


    def create_service_account(self, name: str, namespace: str, server_account: V1ServiceAccount ) -> str:
        v1_api = CoreV1Api(api_client=self.api)
        existing = handle_not_found(v1_api.read_namespaced_service-account, name=name, namespace=namespace)

        if existing is None:
            v1_api.create_namespaced_service_account(namespace=namespace, body=server_account)
            return "ServiceAccount %s/%s created" %(namespace, name)

        v1_api.replace_namespaced_service_account(name=name, namespace=namespace, body=server_account)
        return "ServiceAccount %s/%s updated" %(namespace, name)

    def create_cluster_role_binding(self, name: str, cluster_role_binding: V1ClusterRoleBinding) -> str:
        v1_api = RbacAuthorizationV1Api(api_client=self.api)
        existing = handle_not_found(v1_api.read_cluster_role_binding, name=name)

        if existing is None:
            v1_api.create_cluster_role_binding(body=cluster_role_binding)
            return "ClusterRoleBinding %s created" % name
        v1_api.replace_cluster_role_binding(name=name, body=cluster_role_binding)
        return  "ClusterRoleBinding %s updated" % name



