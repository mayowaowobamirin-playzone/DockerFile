#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# https://medium.com/@alejandro.millan.frias/managing-kubernetes-from-aws-lambda-7922c3546249
# forked from https://github.com/alemf90/eks-lambda-python/blob/master/auth.py

import base64
import os
import re
import yaml
from botocore.config import Config
from boto3.session import Session
from botocore.signers import RequestSigner
from kubernetes import client, config
from kubernetes.client import *
from kubernetes.client.rest import ApiException
import tempfile



__all__ = ["EKS"]

def handle_not_found(api, **args):
    try:
        return api(**args)
    except ApiException as e:
        if e.reason == "Not Found":
            return None
        raise e

class KubeClient(object):

    METHOD = "GET"
    EXPIRES = 60
    EKS_HEADER = "x-k8s-aws-id"
    EKS_PREFIX = "k8s-aws-v1."
    STS_URL = "sts.amazonaws.com"
    STS_ACTION = "Action=GetCallerIdentity&Version=2011-06-15"

    def __init__(self, session: Session, config: Config, cluster_name: str, endpoint: str, certificate: str):
        self.config = config
        self.session = session
        self.cluster_name = cluster_name
        self.endpoint = endpoint
        self.certificate = certificate
        self.kube_config = None
        self.client = session.client("sts",region_name="us-east-1")
        self.api = None

    def __enter__(self):
        self.api = self.__create_api()
        return self

    def __exit__(self, exc_type, exc_file, exc_tb ):
        #if self.kube_config is not None:
        #    if os.path.isfile(self.kube_config):
        #        os.remove(self.kube_config)
        #    self.kube_config = None
        self.api = None


    def __create_api(self):
        self.__create_kube_config()
        config.load_kube_config_from_dict(self.kube_config)
    
        
        client_configuration = client.Configuration()
        
        print(client_configuration)
        
        client_configuration.api_key["authorization"] = self.get_token()
        client_configuration.api_key_prefix["authorization"] = "Bearer"
        client_configuration.host = self.endpoint
        client_configuration.verify_ssl = False
        #client_configuration.ssl_ca_cert = self.certificate

        return client.ApiClient(configuration=client_configuration)

    def __create_kube_config(self):
        if self.kube_config is None:
            kube_content = {
                "apiVersion": "v1",
                "clusters": [
                    {
                        "cluster":
                            {
                                "server": self.endpoint,
                                "certificate-authority-data": self.certificate,
                            },
                        "name": "k8s",
                    }
                ],
                "contexts": [
                    {
                        "context": {
                            "cluster": "k8s",
                            "user": "aws"
                        },
                        "name": "aws",
                    }
                ],
                "current-context": "aws",
                "Kind": "config",
                "users": [
                    {
                        "name": "aws",
                        "user": {"username": "lambda"},
                    }]
            }
            
#             kube_content = {
#                 "apiVersion": "v1",
#                 "current-context": "aws",
#                 "clusters": [
#                     {
#                         "cluster":
#                             {
#                                 "server": self.endpoint,
#                                 "certificate-authority-data": self.certificate,
#                             },
#                         "name": "k8s",
#                     }
#                 ],
#                 "contexts": [
#                     {
#                         "context": {
#                             "cluster": "k8s",
#                             "user": "aws"
#                         },
#                         "name": "aws",
#                     }
#                 ],
#                 "current-context": "aws",
#                 "kind": "Config",
#                 "users": [
#                     {
#                         "name": "aws",
#                          "user": {
#                          "exec": {
#                             "apiVersion": "client.authentication.k8s.io/v1alpha1",
#                             "command": "aws-iam-authenticator",
#                             "args": [
#                                 "token",
#                                 "-i",
#                                 "publiceks"
#                             ]
#                         }
#                     }
#                     }]
#             }

            #kube_config_file = tempfile.NamedTemporaryFile(suffix='kubeconfig', delete=False)
            #data = yaml.safe_dump(kube_content, default_flow_style=False)
            #print(data)
           # kube_config_file.write(data.encode('UTF-8'))
           # kube_config_file.close()

            self.kube_config = kube_content

    def get_token(self) -> str:
        """
        Return bearer token
        """

        region = "us-east-1"
        service_id = self.client.meta.service_model.service_id

        signer = RequestSigner(
        service_id,
            region,
            'sts',
            'v4',
            self.session.get_credentials(),
            self.session.events
        )

        params = {
            'method': 'GET',
            'url': 'https://sts.{}.amazonaws.com/?Action=GetCallerIdentity&Version=2011-06-15'.format(region),
            'body': {},
            'headers': {
                'x-k8s-aws-id': self.cluster_name
            },
            'context': {}
        }

        signed_url = signer.generate_presigned_url(
            params,
            region_name=region,
            expires_in=360,
            operation_name=''
        )

        token = 'k8s-aws-v1.' + base64.urlsafe_b64encode(
                signed_url.encode('utf-8')).decode('utf-8').rstrip('=')

        # need to remove base64 encoding padding:
        # https://github.com/kubernetes-sigs/aws-iam-authenticator/issues/202
        return token



    def create_config_map(self, name: str, namespace: str, config_map: V1ConfigMap) -> str:
        print(config_map)
        v1_api = CoreV1Api(api_client=self.api)
        existing = handle_not_found(v1_api.read_namespaced_config_map, name=name, namespace=namespace)
        print(f"Existing: {existing}")
        
        if existing is not None:
            v1_api.delete_namespaced_config_map(namespace=namespace, name=name)
        
        v1_api.create_namespaced_config_map(namespace=namespace, body=config_map)
        
        return "ConfigMap %s/%s created. Ignoring" % (namespace, name)


    def create_service_account(self, name: str, namespace: str, server_account: V1ServiceAccount ) -> str:
        v1_api = CoreV1Api(api_client=self.api)
        existing = handle_not_found(v1_api.read_namespaced_service-account, name=name, namespace=namespace)

        if existing is None:
            v1_api.create_namespaced_service_account(namespace=namespace, body=server_account)
            return "ServiceAccount %s/%s created" %(namespace, name)

        v1_api.replace_namespaced_service_account(name=name, namespace=namespace, body=server_account)
        return "ServiceAccount %s/%s updated" %(namespace, name)

    def create_cluster_role_binding(self, name: str, cluster_role_binding: V1ClusterRoleBinding) -> str:
        v1_api = RbacAuthorizationV1Api(api_client=self.api)
        existing = handle_not_found(v1_api.read_cluster_role_binding, name=name)

        if existing is None:
            v1_api.create_cluster_role_binding(body=cluster_role_binding)
            return "ClusterRoleBinding %s created" % name
        v1_api.replace_cluster_role_binding(name=name, body=cluster_role_binding)
        return  "ClusterRoleBinding %s updated" % name



