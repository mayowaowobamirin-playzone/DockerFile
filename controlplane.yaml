Description: >
  EKS Control Plane
Parameters:

  EnvironmentName:
    Type: String
    Description: Instance environment type
    Default: NONPROD
    AllowedValues:
      - DR
      - PROD
      - NONPROD
      - PREPROD

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the security groups should be deployed to

  ClusterName:
    Type: String
    Description: Cluster Name

  #  ControlPlaneSecurityGroup:
  #    Description: Security Group for the Control Plane
  #    Type: AWS::EC2::SecurityGroup::Id

  EksControlPlaneSubnets:
    Description: Choose which subnets the EKS should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  UpdateClusterConfigLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  UpdateClusterConfigLambda:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: UpdateClusterConfigLambda
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "eks:UpdateClusterConfig"
              - "eks:DescribeUpdate"
              - "eks:ListUpdates"
              - "logs:*"
            Resource: "*"
      Roles:
        - !Ref UpdateClusterConfigLambdaRole

  InstallUpdateClusterConfigLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import logging
          import time
          import uuid
          import cfnresponse
          import json
          import boto3
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def get_client(session, config):
              return session.client('eks', config)
          def delete_request_handler(event, context):
            if 'ResponseURL' in event:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, None, event['PhysicalResourceId'])
            return none
          def update_cluster_config(event):
              eks_client = boto3.client('eks')
              cluster_name = event["ResourceProperties"]["clusterName"]
              update_type = event["ResourceProperties"]["update_type"]
              if update_type == 'logging':
                  response = check_for_existing_update(eks_client,cluster_name,'LoggingUpdate')
                  if response is None:
                      response = eks_client.update_cluster_config(
                          name=cluster_name,
                          logging={
                              'clusterLogging': [
                                  {
                                      'types':['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'],
                                      'enabled': True
                                  }
                              ]
                          }
                      ).get('update',{})
              elif update_type == 'private-endpoint':
                  response = check_for_existing_update(eks_client,cluster_name,'EndpointAccessUpdate')
                  if response is None:
                       response = eks_client.update_cluster_config(
                           name=cluster_name,
                           resourcesVpcConfig={
                               'endpointPublicAccess': False,
                               'endpointPrivateAccess': True
                           }
                       ).get('update',{})
              else:
                  raise Exception('update_type: %s is not supported' % update_type)
              update_id = response.get('id', None)
              if update_id is not None:
                  wait_for_cluster_update(eks_client, cluster_name, update_id)
                  return
              raise Exception('Error updating the cluster config')
          def check_for_existing_update(eks_client, cluster_name, update_type):
              updates = eks_client.list_updates(name=cluster_name)['updateIds']
              for update_id in updates:
                  update = eks_client.describe_update(name=cluster_name, updateId=update_id)['update']
                  if update['type']==update_type:
                      return update
              return None
          def wait_for_cluster_update(eks_client, cluster_name, update_id):
              count = 0
              while True:
                  time.sleep(30)
                  update = eks_client.describe_update(name=cluster_name, updateId=update_id)['update']
                  status = update.get('status', '')
                  if status == 'Successful':
                      return
                  elif status == 'Failed':
                      raise Exception('Cluster Update Failed')
                  elif status == 'Cancelled':
                      raise Exception('Cluster Update Cancelled')
                  if count > 30:
                      raise Exception('Cluster Update Timed out')
                  count += 1
          def get_event_parameters(event):
              cluster_name = event["ResourceProperties"]["clusterName"]
              update_type = event["ResourceProperties"]["update_type"]
              return cluster_name, update_type
          def handler(event, context):
            cluster_name, update_type = get_event_parameters(event)
            logger.info('Recieved event: ' + json.dumps(event, indent=1))
            if event.get('RequestType', '') == 'Delete':
               return delete_request_handler(event, context)
            physical_resource_id = event.get('PhysicalResourceId', str(uuid.uuid4()))
            cluster_name = event["ResourceProperties"]["clusterName"]
            update_type = event["ResourceProperties"]["update_type"]
            response_status = cfnresponse.SUCCESS
            cluster_updated = update_cluster_config(event)
            response_data = {"Success": cluster_updated}
            if 'ResponseURL' in event:
              cfnresponse.send(event, context, response_status,
                        response_data, physical_resource_id)
            logger.info('Response Data: ' + json.dumps(response_data, indent=1))
            return response_data
      Handler: index.handler
      Role: !GetAtt UpdateClusterConfigLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 900


  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: EKS Control Plane
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ControlPlane

  EksIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${EnvironmentName}-eks
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "eks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EksCluster:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: !Ref ClusterName
      Version: "1.17"
      RoleArn: !GetAtt EksIamRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds: !Ref EksControlPlaneSubnets


  EnableControlPlaneLogs1:
    DependsOn: EksCluster
    Type: Custom::EnableControlPlaneLogs
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - InstallUpdateClusterConfigLambda
          - Arn
      clusterName:
        Ref: ClusterName
      update_type: "logging"

  EnablePrivateEndpoint1:
    DependsOn: EnableControlPlaneLogs1
    Type: Custom::EnableControlPlaneLogs
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - InstallUpdateClusterConfigLambda
          - Arn
      clusterName:
        Ref: ClusterName
      update_type: "private-endpoint"




Outputs:

  EksCluster:
    Description: A reference to the EKS Cluster
    Value: !Ref EksCluster

  EksClusterName:
    Description: EKS Cluster Name
    Value: !Ref ClusterName

  EksClusterEndpoint:
    Description: EKS Cluster Endpoint
    Value: !GetAtt EksCluster.Endpoint

  EksClusterCAData:
    Description: EKS Cluster CertificateAuthorityData
    Value: !GetAtt EksCluster.CertificateAuthorityData
